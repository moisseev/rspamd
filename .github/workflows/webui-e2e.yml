name: WebUI E2E Tests

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      name:
        required: true
        type: string

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Общий timeout для всего job - 15 минут
    services:
      docker:
        image: docker:dind
        options: --privileged --shm-size=2g
    strategy:
      matrix:
        browser: [ firefox ]
        # browser: [ firefox, chromium, webkit ]
    steps:
      - name: Check out source code
        uses: actions/checkout@v4
        with:
          path: src

      - name: Define PREFIX
        run: echo "PREFIX=${GITHUB_WORKSPACE}/install" >> "$GITHUB_ENV"

      - name: Download rspamd binary from build job
        uses: actions/download-artifact@v4
        with:
          name: rspamd-binary-ubuntu-ci
          path: ${{ env.PREFIX }}

      - name: Prepare rspamd configuration
        run: |
          mkdir -p ${PREFIX}/etc/rspamd/local.d
          cp -a src/conf/. "${PREFIX}/etc/rspamd/"
          echo 'static_dir = "/__w/rspamd/rspamd/install/share/rspamd/www";' > ${PREFIX}/etc/rspamd/local.d/worker-controller.inc
          echo 'bind_socket = "*:11334";' >> ${PREFIX}/etc/rspamd/local.d/worker-controller.inc
          echo 'secure_ip = "0.0.0.0/0";' >> ${PREFIX}/etc/rspamd/local.d/worker-controller.inc
          echo 'secure_ip = "::/0";' >> ${PREFIX}/etc/rspamd/local.d/worker-controller.inc
          cat > ${PREFIX}/etc/rspamd/local.d/logging.inc << 'EOF'
          type = "console";
          level = "info";
          EOF
          # Disable multimap module to prevent hyperscan cache issues at runtime
          echo 'enabled = false;' > ${PREFIX}/etc/rspamd/local.d/multimap.conf
          # Disable redis dependent modules for WebUI tests
          echo 'redis { enabled = false; }' > ${PREFIX}/etc/rspamd/local.d/modules.conf
          chmod +x ${PREFIX}/bin/rspamd
          chmod +x ${PREFIX}/bin/rspamadm

      - name: Prepare host runtime dirs
        run: |
          sudo mkdir -p /var/run/rspamd /var/lib/rspamd
          sudo chown $USER:$USER /var/run/rspamd /var/lib/rspamd

      - name: Create network and start rspamd container
        shell: bash -e {0}
        run: |
          docker network create rspamd-test-network || true
          docker run -d \
            --name rspamd-container \
            --network rspamd-test-network \
            -p 11334:11334 \
            -v "${PREFIX}":/__w/rspamd/rspamd/install \
            -v /var/run/rspamd:/var/run/rspamd \
            -v /var/lib/rspamd:/var/lib/rspamd \
            -e LD_LIBRARY_PATH=/__w/rspamd/rspamd/install/lib/rspamd \
            -e RSPAMD_LUA_PATH=/__w/rspamd/rspamd/install/share/rspamd/lualib \
            -e LUA_PATH="/__w/rspamd/rspamd/install/share/rspamd/lualib/?.lua;/__w/rspamd/rspamd/install/share/rspamd/lualib/?/init.lua;;" \
            -e LUA_CPATH="/__w/rspamd/rspamd/install/lib/rspamd/?.so;;" \
            -e GCOV_PREFIX=/tmp/gcov \
            -e GCOV_PREFIX_STRIP=5 \
            ghcr.io/rspamd/rspamd-build-docker:ubuntu-ci \
            /__w/rspamd/rspamd/install/bin/rspamd \
              -c /__w/rspamd/rspamd/install/etc/rspamd/rspamd.conf \
              --insecure -f

          # Wait up to 120 seconds for WebUI to respond using curl container (уменьшено с 360 до 120)
          max_retries=60
          for i in $(seq 1 "$max_retries"); do
            # Use curl with write-out to get HTTP status code directly
            http_code=$(docker run --rm --network host curlimages/curl:latest \
              -s -S --max-time 5 -w '%{http_code}' -o /dev/null http://localhost:11334/ping 2>/dev/null || true)

            # If curl failed or returned empty, set to "000"
            if [[ -z "$http_code" ]]; then
              http_code="000"
            fi

            echo "Attempt $i/$max_retries - HTTP code: $http_code"

            if [[ "$http_code" == "200" ]]; then
              echo "Rspamd WebUI is up (HTTP 200) after $((i * 2)) seconds"
              docker exec rspamd-container netstat -tlnp | grep ":11334" && echo "Port 11334 is listening"
              break
            elif [[ "$http_code" != "000" ]]; then
              echo "Unexpected HTTP code $http_code from /ping; failing"
              exit 1
            fi

            # Add diagnostic information every 10 attempts
            if [[ $((i % 10)) -eq 0 ]]; then
              echo "Diagnostic info at attempt $i:"
              echo "Container status:"
              docker ps | grep rspamd-container || echo "Container not running"
              echo "Process list:"
              docker exec rspamd-container ps aux | grep rspamd || echo "No rspamd process"
              echo "Port status:"
              docker exec rspamd-container netstat -tlnp | grep ":11334" || echo "Port 11334 not listening"
              echo "Last 5 lines of logs:"
              docker logs rspamd-container --tail 5 || echo "No logs available"
              echo "---"
            fi

            echo "Waiting for rspamd... ($i/$max_retries) - HTTP code: $http_code"
            sleep 2
          done

          if [[ "$i" -eq "$max_retries" && "$http_code" != "200" ]]; then
            total_wait=$(( max_retries * 2 ))
            echo "ERROR: rspamd WebUI did not become available after $total_wait seconds"
            docker exec rspamd-container netstat -tlnp | grep ":11334" || echo "Port 11334 not found"
            docker exec rspamd-container ps aux | grep rspamd || echo "No rspamd process found"
            exit 1
          fi

      - name: Debug rspamd container logs if it fails to start
        if: always()
        run: |
          echo "::group::Container status"
          docker ps -a | grep rspamd-container || echo "Container not found"
          echo "::endgroup::"
          echo "::group::rspamadm configdump logging"
          docker exec rspamd-container /__w/rspamd/rspamd/install/bin/rspamadm configdump logging || true
          echo "::endgroup::"
          echo "::group::rspamadm configdump worker"
          docker exec rspamd-container /__w/rspamd/rspamd/install/bin/rspamadm configdump worker || true
          echo "::endgroup::"
          echo "::group::Last 100 lines of container logs"
          docker logs rspamd-container --tail 100 || true
          echo "::endgroup::"
          echo "::group::Full container logs"
          docker logs rspamd-container || true
          echo "::endgroup::"
          echo "Process list:"
          docker exec rspamd-container ps aux || true
          echo "::group::Filesystem contents of PREFIX"
          docker exec rspamd-container ls -lR /__w/rspamd/rspamd/install || true
          echo "::endgroup::"
          echo "Shared library check:"
          docker exec rspamd-container ldd /__w/rspamd/rspamd/install/bin/rspamd || true
          echo "Port status:"
          docker exec rspamd-container netstat -tlnp | grep ":11334" || echo "Port 11334 not listening"

      - name: Verify WebUI static assets
        run: |
          for asset in index.html css/rspamd.css js/main.js img/rspamd_logo_navbar.png; do
            curl -4 -fsSo /dev/null http://localhost:11334/$asset || (echo "Missing $asset" && exit 1)
          done

      - name: Debug network connectivity and authentication mode
        run: |
          echo "Testing connectivity from TestCafe container to rspamd:"
          docker run --rm --network rspamd-test-network curlimages/curl:latest \
            -s -S --max-time 5 -w 'HTTP: %{http_code}, Time: %{time_total}s\n' \
            http://rspamd-container:11334/ping || echo "Failed to connect"

          echo "Testing connectivity to localhost:"
          docker run --rm --network host curlimages/curl:latest \
            -s -S --max-time 5 -w 'HTTP: %{http_code}, Time: %{time_total}s\n' \
            http://localhost:11334/ping || echo "Failed to connect"

          echo "::group::IPv6 diagnostics"
          echo "Docker network info:"
          docker network inspect rspamd-test-network | grep -A 10 -B 5 "IPv6" || echo "No IPv6 info found"

          echo "Container IPv6 addresses:"
          docker exec rspamd-container ip -6 addr show || echo "No IPv6 addresses found"

          echo "DNS resolution test (IPv6):"
          docker run --rm --network rspamd-test-network curlimages/curl:latest \
            -6 -s -S --max-time 5 --resolve rspamd-container:11334:127.0.0.1 \
            http://rspamd-container:11334/ping || echo "DNS resolution failed"

          echo "Direct IPv6 localhost test:"
          docker run --rm --network rspamd-test-network curlimages/curl:latest \
            -6 -s -S --max-time 5 http://[::1]:11334/ping || echo "IPv6 localhost failed"
          echo "::endgroup::"

          echo "::group::Authentication mode check"
          echo "IPv4:"
          response_4=$(docker run --rm --network rspamd-test-network curlimages/curl:latest \
            -4 -s -S --max-time 10 -w '%{http_code}' http://rspamd-container:11334/auth)
          http_code_4=${response_4: -3}
          body_4=${response_4%???}

          if [[ "$http_code_4" == "200" ]]; then
            read_only_4=$(echo "$body_4" | grep -o '"read_only":[^,}]*' | cut -d':' -f2 | tr -d ' ')
            if [[ "$read_only_4" == "false" ]]; then
              echo "✅ IPv4 secure_ip working: read_only=false"
            else
              echo "❌ IPv4 secure_ip failed: read_only=$read_only_4"
            fi
          else
            echo "❌ IPv4 connection failed: HTTP $http_code_4"
          fi

          echo "IPv6:"
          response_6=$(docker run --rm --network rspamd-test-network curlimages/curl:latest \
            -6 -s -S --max-time 10 -w '%{http_code}' http://rspamd-container:11334/auth)
          http_code_6=${response_6: -3}
          body_6=${response_6%???}

          if [[ "$http_code_6" == "200" ]]; then
            read_only_6=$(echo "$body_6" | grep -o '"read_only":[^,}]*' | cut -d':' -f2 | tr -d ' ')
            if [[ "$read_only_6" == "false" ]]; then
              echo "✅ IPv6 secure_ip working: read_only=false"
            else
              echo "❌ IPv6 secure_ip failed: read_only=$read_only_6"
            fi
          else
            echo "❌ IPv6 connection failed: HTTP $http_code_6"
          fi
          echo "::endgroup::"

      - name: Run TestCafe tests in separate container
        shell: bash -e {0}
        run: |
          docker run --rm \
            --network rspamd-test-network \
            -v ${{ github.workspace }}/src/test/webui-e2e:/tests \
            -w /tests \
            testcafe/testcafe:latest \
            firefox:headless tests/*.js --reporter spec

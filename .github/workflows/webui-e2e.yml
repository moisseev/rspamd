name: WebUI E2E Tests

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      name:
        required: true
        type: string

jobs:
  e2e:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image }}
      options: --user root
    strategy:
      matrix:
        browser: [ firefox ]
        # browser: [ firefox, chromium, webkit ]
    steps:
      - name: Check out source code
        uses: actions/checkout@v4
        with:
          path: src

      - name: Define install prefix
        run: echo "PREFIX=${GITHUB_WORKSPACE}/install" >> "$GITHUB_ENV"

      - name: Download rspamd binary from build job
        uses: actions/download-artifact@v4
        with:
          name: rspamd-binary-ubuntu-ci
          path: ${{ env.PREFIX }}

      - name: Prepare test configuration and static_dir
        run: |
          mkdir -p ${PREFIX}/etc/rspamd/local.d
          cp -r src/conf/* ${PREFIX}/etc/rspamd/
          echo "static_dir = \"${PREFIX}/share/rspamd/www\";" > ${PREFIX}/etc/rspamd/local.d/worker-controller.inc
          cat > ${PREFIX}/etc/rspamd/local.d/logging.inc << 'EOF'
          type = "console";
          level = "error";
          EOF
          # Disable multimap module to prevent hyperscan cache issues at runtime
          echo 'enabled = false;' > ${PREFIX}/etc/rspamd/local.d/multimap.conf
          # Disable redis dependent modules for WebUI tests
          echo 'redis { enabled = false; }' > ${PREFIX}/etc/rspamd/local.d/modules.conf
          sudo mkdir -p /var/run/rspamd /var/lib/rspamd
          sudo chown $USER:$USER /var/run/rspamd /var/lib/rspamd

      - name: Install curl
        run: yum install -y curl || apt-get update && apt-get install -y curl

      - name: Make rspamd binary executable
        run: chmod +x ${PREFIX}/bin/rspamd

      - name: Start rspamd and wait for WebUI
        shell: bash -e {0}
        run: |
          ${PREFIX}/bin/rspamd \
            -c ${PREFIX}/etc/rspamd/rspamd.conf \
            --insecure &
          # Initial delay before polling (in seconds)
          initial_delay=5
          sleep "$initial_delay"
          # Wait up to 60 seconds for WebUI to respond
          max_retries=30
          for i in $(seq 1 "$max_retries"); do
            http_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:11334/ping || true)
            if [[ "$http_code" == "200" ]]; then
              elapsed=$(( initial_delay + (i - 1) * 2 ))
              echo "Rspamd WebUI is up (HTTP 200) after $elapsed seconds"
              break
            elif [[ "$http_code" != "000" ]]; then
              echo "Unexpected HTTP code $http_code from /ping; failing"
              exit 1
            fi
            echo "Waiting for rspamd... ($i/$max_retries)"
            sleep 2
          done

          if [[ "$i" -eq "$max_retries" && "$http_code" != "200" ]]; then
            total_wait=$(( initial_delay + max_retries * 2 ))
            echo "ERROR: rspamd WebUI did not become available after $total_wait seconds"
            exit 1
          fi

      - name: Verify WebUI static assets
        run: |
          for asset in index.html css/rspamd.css js/main.js img/rspamd_logo_navbar.png; do
            curl -fsSo /dev/null http://localhost:11334/$asset || \
              (echo "Missing $asset" && exit 1)
          done

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Playwright
        working-directory: src/test/webui-e2e
        run: npm install --no-save @playwright/test

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: /root/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ matrix.browser }}

      - name: Install Playwright browsers
        working-directory: src/test/webui-e2e
        env:
          HOME: /root
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run WebUI E2E tests
        working-directory: src/test/webui-e2e
        env:
          HOME: /root
        run: npx playwright test --project=${{ matrix.browser }} --retries=1

      - name: Upload Playwright report on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: src/test/webui-e2e/playwright-report/
          retention-days: 1
